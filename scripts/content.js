class BaseKeyboard{constructor(){this.open=!1,this.shift=!1,this.alph=0,this.layout=JP_keyboard_layout}render(){let t=document.createElement("div");t.id="jp-web-keyboard-shadow";let e=t.attachShadow({mode:"open"}),s=document.createElement("div");return s.innerHTML=JP_keyboard_extension_template,e.appendChild(s),document.body.append(t),this.renderAlph(),e}get(t,e=!1){let s=document.getElementById("jp-web-keyboard-shadow").shadowRoot;return s||(s=this.render()),s?t?e?s.querySelectorAll(t):s.querySelector(t):s:null}toggle(){let t=this.get(".container");t&&(this.open=!this.open,this.open?t.classList.add("active"):t.classList.remove("active"))}toggleShift(t=null){let e=this.get('.key-action[data-action="shift"]'),s=this.get(".keyboard");e&&this.open&&(this.shift=null===t?!this.shift:t,this.shift?e.classList.add("active"):e.classList.remove("active"),this.shift?s.classList.add("shifted"):s.classList.remove("shifted"))}cycleAlph(){let t=this.get('.key-action[data-action="cycle"]');t&&this.open&&(t.querySelector(`.alph-${this.alph}`).classList.remove("active"),this.alph=1^this.alph,t.querySelector(`.alph-${this.alph}`).classList.add("active"),this.renderAlph())}renderAlph(){let t=this.get(".key",!0);if(!t)return;let e=0;for(let s in this.layout){let i=this.layout[s][0][this.alph],a=this.layout[s][0][this.alph+2];t[e].innerHTML=`<span class="shift">${a||"&nbsp;"}</span><span class="value">${i}</span>`,t[e].dataset.code=s,t[e].dataset.value=i,t[e].dataset.shift=a,e++}}animateK(t){let e=this.get(`li[data-code="${t.code}"]`);e&&(e.classList.add("active"),setTimeout(()=>{e.classList.remove("active")},200))}translateK(t){let e=this.layout[t.code][0],s=e[this.alph]||"",i=e[this.alph+2]||"";return this.shift?i:s}dispatch(t,e,s=!1){let i=t.target;if(!i.value)return;let a=i.selectionStart,h=i.selectionEnd,l=i.value.substring(0,s?a-1:a),c=i.value.substring(h);i.value=l+e+c;let r=s?a:a+1;i.setSelectionRange(r,r)}voice(t){let e=t.target.selectionStart;if(!e)return;let s="BracketLeft"==t.code?0:1,i=t.target.value.substring(e-1,e),a=this.revSearch(i);if(!a)return;let h=this.layout[a][this.alph+1][s];h&&this.dispatch(t,h,!0)}backSpc(){let t=document.activeElement;if(!t.value)return;let e=t.selectionStart,s=t.selectionEnd,i=e==s?e-1:e;t.value=t.value.substring(0,i)+t.value.substring(s),t.setSelectionRange(i,i)}revSearch(t){for(let e in this.layout)if(this.layout[e][0].includes(t)||this.layout[e][this.alph].includes(t)||this.layout[e][this.alph+1].includes(t))return e;return null}}class Keyboard extends BaseKeyboard{constructor(){super(),this.hotKeys={toggle:{ctrlKey:!0,code:"KeyI"},toggleShift:{ctrlKey:!1,code:"ShiftLeft"},cycleAlph:{ctrlKey:!1,code:"Tab"}},this.actions={toggle:t=>{t.preventDefault(),this.toggle(!1)},toggleShift:t=>{t.preventDefault(),this.toggleShift()},unshift:t=>{t.preventDefault(),this.toggleShift(!1)},cycleAlph:t=>{t.preventDefault(),this.cycleAlph()},voice:t=>{t.preventDefault(),this.voice(t)},dispatch:t=>{t.preventDefault(),this.dispatch(t,this.translateK(t))}}}init(){this.render(),window.addEventListener("keydown",t=>{this.keydownEvt(t)}),window.addEventListener("keyup",t=>{this.keyupEvt(t)}),console.log(this.get(),this.get(".keyboard")),this.get(".keyboard").addEventListener("mousedown",t=>{this.mouseEvt(t)})}mouseEvt(t){t.preventDefault();let e=t.target,s=e.dataset.action,i=e.dataset.code;if(i&&this.animateK({code:i}),s)switch(s){case"shift":this.toggleShift();return;case"cycle":this.cycleAlph();return;case"delete":this.backSpc();return;case"semi-voiced":state.shift&&this.voice({target:document.activeElement,code:"BracketLeft"});return;case"voiced":state.shift&&this.voice({target:document.activeElement,code:"BracketRight"});return}i&&(this.dispatch({target:document.activeElement},this.shift?e.dataset.shift:e.dataset.value),this.shift&&state.toggleShift())}keydownEvt(t){if(!this.exec(()=>{this.actions.toggle(t)},this.evtMapper(t,this.hotKeys.toggle))&&this.open&&(this.animateK(t),this.exec(()=>{this.actions.toggleShift(t)},this.evtMapper(t,this.hotKeys.toggleShift))||this.exec(()=>{this.actions.cycleAlph(t)},this.evtMapper(t,this.hotKeys.cycleAlph))||!this.exec(()=>{this.actions.voice(t)},t.code.includes("Bracket")&&!this.shift)&&this.exec(()=>{this.actions.dispatch(t)},this.layout[t.code]&&!t.ctrlKey)))return}keyupEvt(t){this.exec(()=>{this.actions.unshift(t)},this.evtMapper(t,this.hotKeys.toggleShift))}exec(t,e){return!!e&&(t(),!0)}evtMapper(t,e){return t.code==e.code&&t.ctrlKey==e.ctrlKey}}const k=new Keyboard;k.init();